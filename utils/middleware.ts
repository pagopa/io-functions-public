import * as t from "io-ts";
import { PatternString } from "@pagopa/ts-commons/lib/strings";
import { RequiredQueryParamMiddleware } from "@pagopa/io-functions-commons/dist/src/utils/middlewares/required_query_param";
import { enumType, withDefault } from "@pagopa/ts-commons/lib/types";

// Tokens are generated by CreateValidationTokenActivity function inside the
// io-functions-app project (https://github.com/pagopa/io-functions-app)
// A token is in the following format:
// [tokenId ULID] + ":" + [validatorHash crypto.randomBytes(12)]
export const TokenQueryParam = PatternString(
  "^[A-Za-z0-9]{26}:[A-Fa-f0-9]{24}$"
);
export type TokenQueryParam = t.TypeOf<typeof TokenQueryParam>;

export const TokenQueryParamMiddleware = RequiredQueryParamMiddleware(
  "token",
  TokenQueryParam
);

// CONFIRM -> verify token and on success redirect to confirm page
// VALIDATE -> verify token and on success redirect to result page
export enum FlowTypeEnum {
  "CONFIRM" = "CONFIRM",
  "VALIDATE" = "VALIDATE"
}
export const FlowType = enumType<FlowTypeEnum>(FlowTypeEnum, "FlowChoice");
export type FlowType = t.TypeOf<typeof FlowType>;

// even if the query param is optional the withDefault type is covering the absence
// of the value on the URL
export const ConfirmEmailFlowQueryParamMiddleware = RequiredQueryParamMiddleware(
  "flow",
  withDefault(FlowType, FlowTypeEnum.CONFIRM)
);
